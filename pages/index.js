import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState } from 'react'

export default function Home({ questionsList }) {
  const [questions, setQuestions] = useState(questionsList)
  const [score, setScore] = useState(0)
  const questionCount = questions.length
  const questionsAnswered = questions.filter(question => question.answer).length
  const percentageAnswered = Math.round((questionsAnswered / questionCount) * 100)
  const percentageCorrect = Math.round((score / questionCount) * 100)

  return (
    <div className={styles.container}>
      <Head>
        <title>Green River Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/greenRiver.png" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://www.greenriver.com/">Green River</a>
        </h1>
        <p>You have answered {questionsAnswered} out of {questionCount}</p>
        {/* added progress bar */}
        <progress value={percentageAnswered} max="100"></progress>
        <div className={styles.grid}>
          {questions.map((item) => (
            <div key={`Question ${item.id}`} className={styles.card}>
              <h2>Define: {item.word}</h2>
              {item.choices.map((choice, choiceIndex) => (
                <div key={`Answer ${choiceIndex}`}>
                  <input type="radio" name={item.questionIndex} value={choiceIndex}
                    onChange={(e) => {
                      const newQuestions = [...questions]
                      newQuestions[item.questionIndex].answer = e.target.value
                      setQuestions(newQuestions)
                    }
                    }
                  />
                  <label htmlFor={choiceIndex}>{choice.text}</label>
                </div>
              ))}
            </div>
          ))}
        </div>
        <span>Your Score: {score} out of {questionCount} - {percentageCorrect}%</span>
        {percentageCorrect != 0 && <progress value={percentageCorrect} max="100" />}


        <button type='button'
          disabled={percentageAnswered < 100}
          onClick={() => {
            const newScore = questions.reduce((acc, q, index) => {
              if (q === null) {
                return acc
              }
              if (parseInt(q.answer) === parseInt(q.correctChoiceIndex)) {
                return acc + 1
              }
              return acc
            }, 0)
            setScore(newScore)
          }}>Submit</button>
      </main>



      <footer className={styles.footer}>
        <a
          href="https://portfolio.boskind.tech/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Robert Boskind
        </a>
      </footer>
    </div>
  )
}


export async function getStaticProps() {
  // Call an external API endpoint 

  const url = `https://gist.githubusercontent.com/ttoomey/c8b14270e076165a97ff0f4e3ee251d3/raw/9b2477163e3b6617045db4caf6165c818e068918/questions.json`;

  //get the data from the url
  const data = await fetch(url)
    .then((response) => response.json())
    .catch((error) => console.log(error));
  const questionsList = data.map((item, index) => {
    item = { ...item, answer: null, questionIndex: index }
    return item
  })


  return {
    props: { questionsList }, // will be passed to the page component as props
  };
}